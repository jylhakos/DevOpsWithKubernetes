apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-app-deployment
  namespace: go-app
  labels:
    app: go-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: go-app
  template:
    metadata:
      labels:
        app: go-app
    spec:
      containers:
      - name: go-app
        image: gcr.io/YOUR_PROJECT_ID/go-app:latest  # Replace with your GCR image
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: PORT
        - name: GIN_MODE
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: GIN_MODE
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: go-app-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: go-app-secret
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: go-app-config
              key: REDIS_PORT
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      initContainers:
      - name: wait-for-postgres
        image: postgres:14-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432; do
            echo "Waiting for postgres..."
            sleep 2
          done
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 ping; do
            echo "Waiting for redis..."
            sleep 2
          done
