apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: typescript-app-ingress
  namespace: typescript-app
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "typescript-app-ip"
    networking.gke.io/managed-certificates: "typescript-app-ssl"
    kubernetes.io/ingress.allow-http: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /api/*
        pathType: ImplementationSpecific
        backend:
          service:
            name: backend-service
            port:
              number: 80
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  tls:
  - hosts:
    - your-domain.com
    secretName: typescript-app-tls
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: typescript-app-ssl
  namespace: typescript-app
spec:
  domains:
  - your-domain.com
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service-nodeport
  namespace: typescript-app
  labels:
    app: backend
spec:
  type: NodePort
  selector:
    app: backend
  ports:
  - port: 80
    targetPort: 5000
    nodePort: 30080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: typescript-app
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: gke-system
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
